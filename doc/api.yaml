swagger: "2.0"
info:
  description: "APIs to manage user/device relationships in a home automation system."
  version: "1.0.0"
  title: "User Device Service API"
  contact:
    email: "sevenlol1007@gmail.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/"
tags:
- name: "user"
  description: "Operations about users"
- name: "device"
  description: "Operations about devices, e.g., living room light"
- name: "device type"
  description: "Operations about categories of devices, e.g., light"
- name: "binding"
  description: "Operations about bindings between users and devices"
schemes:
- "http"
paths:
  /users:
    post:
      tags:
      - "user"
      summary: "Create a new user"
      description: ""
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object to be created"
        required: true
        schema:
          $ref: "#/definitions/UserRequest"
      responses:
        201:
          description: "user created"
        400:
          description: "malformed user request"
        409:
          description: "email or username already used"
    get:
      tags:
      - "user"
      summary: "Query users"
      description: ""
      operationId: "queryUsers"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      - in: "query"
        name: "email"
        type: "string"
        description: "return users with this email address"
      - in: "query"
        name: "name"
        type: "string"
        description: "return users with this username"
      - $ref: "#/parameters/sortField"
      responses:
        200:
          description: ""
          schema:
            type: "object"
            properties:
              total:
                $ref: "#/parameters/totalResult"
              results:
                type: "array"
                items:
                  $ref: "#/definitions/User"
  /users/{userId}:
    get:
      tags:
      - "user"
      summary: "Retrieve user by ID"
      description: ""
      operationId: "getUserById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to return"
        required: true
        type: "string"
      responses:
        200:
          schema:
            $ref: "#/definitions/User"
          description: "operation succeeded"
        404:
          description: "user with speicified ID does not exist"
    put:
      tags:
      - "user"
      summary: "Update user"
      description: ""
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "User object to be updated"
        required: true
        schema:
          $ref: "#/definitions/UserRequest"
      responses:
        200:
          description: "operation succeeded"
        400:
          description: "malformed update request"
        404:
          description: "user with speicified ID does not exist"
        409:
          description: "email or username already used"
    patch:
      tags:
      - "user"
      summary: "Partially update user"
      description: ""
      operationId: "partialUpdateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "User object to be updated, **must contain at least one field**"
        schema:
          $ref: "#/definitions/UserRequest"
      responses:
        200:
          description: "operation succeeded"
        400:
          description: "malformed update request"
        404:
          description: "user with speicified ID does not exist"
        409:
          description: "email or username already used"
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: ""
      operationId: "deleteUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "operation succeeded"
        404:
          description: "user with speicified ID does not exist"
  /devices:
    post:
      tags:
      - "device"
      summary: "Create a new device"
      description: ""
      operationId: "createDevice"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "Device object to be created"
          required: true
          schema:
            $ref: "#/definitions/DeviceRequest"
      responses:
        201:
          description: "device created"
        400:
          description: "malformed device request"
        404:
          description: "specified device type does not exist"
        409:
          description: "mac address already used"
    get:
      tags:
      - "device"
      summary: "Query devices"
      description: ""
      operationId: "queryDevices"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      - in: "query"
        name: "name"
        type: "string"
        description: "return devices with specified name"
      - in: "query"
        name: "mac"
        type: "string"
        description: "return devices with specified MAC address"
      - in: "query"
        name: "type"
        type: "integer"
        description: "return devices with specified type"
      - $ref: "#/parameters/sortField"
      responses:
        200:
          description: ""
          schema:
            type: "object"
            properties:
              total:
                $ref: "#/parameters/totalResult"
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Device"
  /devices/{deviceId}:
    get:
      tags:
      - "device"
      summary: "Retrieve device by ID"
      description: ""
      operationId: "getDeviceById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "deviceId"
        in: "path"
        description: "ID of device to return"
        required: true
        type: "string"
      responses:
        200:
          schema:
            $ref: "#/definitions/Device"
          description: "operation succeeded"
        404:
          description: "device with speicified ID does not exist"
    put:
      tags:
      - "device"
      summary: "Update device"
      description: ""
      operationId: "updateDevice"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "deviceId"
        in: "path"
        description: "ID of device to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Device object used to update"
        required: true
        schema:
          $ref: "#/definitions/DeviceRequest"
      responses:
        200:
          description: "operation succeeded"
        400:
          description: "malformed update request"
        404:
          description: "device (or device type used to update) with speicified ID does not exist"
        409:
          description: "MAC address already used"
    patch:
      tags:
      - "device"
      summary: "Partial update device"
      description: ""
      operationId: "partialUpdateDevice"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "deviceId"
        in: "path"
        description: "ID of device to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Device object used to update, **must contain at least one updatable field**"
        schema:
          $ref: "#/definitions/DeviceRequest"
      responses:
        200:
          description: "operation succeeded"
        400:
          description: "malformed update request"
        404:
          description: "device (or device type used to update) with speicified ID does not exist"
        409:
          description: "MAC address already used"
    delete:
      tags:
      - "device"
      summary: "Delete device by ID"
      description: ""
      operationId: "deleteDevice"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "deviceId"
        in: "path"
        description: "ID of device to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "operation succeeded"
        404:
          description: "device with speicified ID does not exist"
  /types/devices:
    post:
      tags:
      - "device type"
      summary: "Create a new device type"
      description: ""
      operationId: "createDeviceType"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "DeviceType object to be created"
          required: true
          schema:
            $ref: "#/definitions/DeviceTypeRequest"
      responses:
        201:
          description: "device type created"
        400:
          description: "malformed device type request"
    get:
      tags:
      - "device type"
      summary: "Query device types"
      description: "Sorted by type value in descending order"
      operationId: "queryDeviceTypes"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      - in: "query"
        name: "name"
        type: "string"
        description: "return device types with specified name"
      - in: "query"
        name: "modelname"
        type: "string"
        description: "return device types with specified model name"
      - in: "query"
        name: "manufacturer"
        type: "string"
        description: "return device types with specified manufacturer name"
      - $ref: "#/parameters/sortField"
      responses:
        200:
          description: ""
          schema:
            type: "object"
            properties:
              total:
                $ref: "#/parameters/totalResult"
              results:
                type: "array"
                items:
                  $ref: "#/definitions/DeviceType"
  /types/devices/{type}:
    get:
      tags:
      - "device type"
      summary: "Retrieve device type by ID (type value)"
      description: ""
      operationId: "getDeviceTypeById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "ID (type value) of device type to return"
        required: true
        type: "integer"
      responses:
        200:
          schema:
            $ref: "#/definitions/DeviceType"
          description: "operation succeeded"
        404:
          description: "device type with speicified ID does not exist"
    put:
      tags:
      - "device type"
      summary: "Update device type"
      description: ""
      operationId: "updateDeviceType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "ID of device type to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "DeviceType object used to update"
        required: true
        schema:
          $ref: "#/definitions/DeviceTypeRequest"
      responses:
        200:
          description: "operation succeeded"
        400:
          description: "malformed update request"
        404:
          description: "device type with speicified ID does not exist"
    patch:
      tags:
      - "device type"
      summary: "Partial update device type"
      description: ""
      operationId: "partialUpdateDeviceType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "ID of device type to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "DeviceType object used to update, **must contain at least one field**"
        schema:
          $ref: "#/definitions/DeviceTypeRequest"
      responses:
        200:
          description: "operation succeeded"
        400:
          description: "malformed update request"
        404:
          description: "device type with speicified ID does not exist"
    delete:
      tags:
      - "device type"
      summary: "Delete device type by ID"
      description: ""
      operationId: "deleteDeviceType"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "ID of device type to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "operation succeeded"
        404:
          description: "device type with speicified ID does not exist"
  /bindings:
    post:
      tags:
      - "binding"
      summary: "Bind a device to a user"
      description: ""
      operationId: "createBinding"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User and device ID to be bound"
          required: true
          schema:
            $ref: "#/definitions/BindingRequest"
      responses:
        201:
          description: "binding created"
        400:
          description: "malformed device type request"
        404:
          description: "specified user or device does not exist"
        409:
          description: "binding with this user-device pair already exists"
    get:
      tags:
      - "binding"
      summary: "Query bindings"
      description: "Sorted by bound_at in descending order"
      operationId: "queryBindings"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - $ref: "#/parameters/offsetParam"
      - $ref: "#/parameters/limitParam"
      - in: "query"
        name: "user_id"
        type: "string"
        description: "return bindings that contain specified user"
      - in: "query"
        name: "device_id"
        type: "string"
        description: "return binding that contain specified device"
      - in: "query"
        name: "entities"
        type: "string"
        enum:
        - "device"
        description: "if this value is set to device, corresponding Device entity will be embedded in the response"
      - $ref: "#/parameters/sortField"
      responses:
        200:
          description: ""
          schema:
            type: "object"
            properties:
              total:
                $ref: "#/parameters/totalResult"
              results:
                type: "array"
                items:
                  $ref: "#/definitions/Binding"
  /bindings/{bindingId}:
    get:
      tags:
      - "binding"
      summary: "Retrieve binding by ID"
      description: "Related Device entity will always be embedded in the response"
      operationId: "getBindingById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bindingId"
        in: "path"
        description: "ID of binding to return"
        required: true
        type: "string"
      responses:
        200:
          schema:
            $ref: "#/definitions/Binding"
          description: "operation succeeded"
        404:
          description: "binding with speicified ID does not exist"
    delete:
      tags:
      - "binding"
      summary: "Delete binding by ID"
      description: ""
      operationId: "deleteBinding"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "bindingId"
        in: "path"
        description: "ID of binding to delete"
        required: true
        type: "string"
      responses:
        200:
          schema:
            $ref: "#/definitions/Binding"
          description: "operation succeeded"
        404:
          description: "binding with speicified ID does not exist"
definitions:
  User:
    type: "object"
    required:
    - "name"
    - "email"
    - "password"
    properties:
      id:
        type: "string"
      name:
        type: "string"
        description: "unique, should be username"
      email:
        type: "string"
        description: "unique"
      password:
        type: "string"
        description: "should be already hashed"
      created_at:
        type: "string"
        format: "datetime"
      updated_at:
        type: "string"
        format: "datetime"
      enabled:
        type: "boolean"
  UserRequest:
    type: "object"
    required:
    - "name"
    - "email"
    - "password"
    properties:
      name:
        type: "string"
        description: "unique, should be username"
      email:
        type: "string"
        description: "unique"
      password:
        type: "string"
        description: "should be already hashed"
      enabled:
        type: "boolean"
  Device:
    type: "object"
    required:
    - "type"
    - "name"
    - "mac"
    - "pin_code"
    properties:
      id:
        type: "string"
      type:
        type: "integer"
        description: "primary key of DeviceType"
      name:
        type: "string"
        description: "device name, 50 characters max"
      mac:
        type: "string"
        format: "^[a-fA-F0-9]{12}$"
        description: "unique MAC address"
      pin_code:
        type: "integer"
      created_at:
        type: "string"
        format: "datetime"
      updated_at:
        type: "string"
        format: "datetime"
  DeviceRequest:
    type: "object"
    required:
    - "type"
    - "name"
    - "mac"
    - "pin_code"
    properties:
      type:
        type: "integer"
        description: "primary key of DeviceType"
      name:
        type: "string"
        description: "device name, 50 characters max"
      mac:
        type: "string"
        format: "^[a-fA-F0-9]{12}$"
        description: "unique MAC address"
      pin_code:
        type: "integer"
  DeviceType:
    type: "object"
    required:
    - "name"
    - "modelname"
    - "manufacturer"
    properties:
      type:
        type: "integer"
      name:
        type: "string"
        description: "display name, 50 characters max"
      description:
        type: "string"
        description: "device category description, 150 characters max"
      modelname:
        type: "string"
        description: "device model name, 100 characters max"
      manufacturer:
        type: "string"
        description: "device manufacturer name, 100 characters max"
  DeviceTypeRequest:
    type: "object"
    required:
    - "name"
    - "modelname"
    - "manufacturer"
    properties:
      name:
        type: "string"
        description: "display name, 50 characters max"
      description:
        type: "string"
        description: "device category description, 150 characters max"
      modelname:
        type: "string"
        description: "device model name, 100 characters max"
      manufacturer:
        type: "string"
        description: "device manufacturer name, 100 characters max"
  Binding:
    type: "object"
    required:
    - "user_id"
    - "device_id"
    properties:
      id:
        type: "string"
        description: "binding id"
      user_id:
        type: "string"
        description: "referenced user's id, pair(user_id, device_id) unique"
      device_id:
        type: "string"
        description: "referenced device's id, pair(user_id, device_id) unique"
      bound_at:
        type: "string"
        format: "datetime"
        description: "binding time"
      device:
        $ref: "#/definitions/Device"
  BindingRequest:
    type: "object"
    required:
    - "user_id"
    - "device_id"
    properties:
      user_id:
        type: "string"
        description: "referenced user's id, pair(user_id, device_id) unique"
      device_id:
        type: "string"
        description: "referenced device's id, pair(user_id, device_id) unique"
parameters:
  offsetParam:
    name: offset
    in: query
    description: Number of skipped results, must be a multiple of limit
    required: true
    type: number
    format: int32
  limitParam:
    name: limit
    in: query
    description: Limits the number of returned results
    required: true
    type: number
    format: int32
  sortField:
    name: sort
    in: query
    description: Property name used to sort the result, starting with - means descending order
    type: string
  totalResult:
    name: total
    in: query
    description: Total number of items that match the given query
    type: integer